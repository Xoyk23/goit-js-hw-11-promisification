{"version":3,"sources":["webpack:///./js/task1.js","webpack:///./js/task2.js","webpack:///./js/task3.js"],"names":["document","querySelector","addEventListener","delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","obj","id","logSuccess","logError","warn","amount","catch"],"mappings":"uJAAiBA,SAASC,cAAc,UAC/BC,iBAAiB,SAE1B,WACE,IAAMC,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,M,8BCjBFR,SAASC,cAAc,UAC/BC,iBAAiB,SAE1B,WACE,IAAMW,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAAAC,GAWjBA,EAVqBW,EAASE,KAAI,SAAAC,GAChC,OAAIA,EAAKN,OAASI,EACK,OAAH,UAAQE,EAAR,CAAcL,QAASK,EAAKL,SAKzCK,UAOPZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAW7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,MCvCpBR,SAASC,cAAc,UAC/BC,iBAAiB,SAE1B,WACE,IAIMqB,EAAkB,SAAAC,GACtB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GAC3B,IAN+BC,EAAKC,EAM9BxB,GANyBuB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOlDnB,YAAW,WAGT,GAFmBqB,KAAKE,SAAW,GAEnB,CACd,IAAMC,EAAM,CAAEC,GAAIR,EAAYQ,GAAIvB,KAAMN,GAExCG,EAAQyB,QAERN,EAAOD,EAAYQ,MAEpB7B,OAID8B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIvB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGIyB,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAaFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAE/DX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,Q","file":"main.bd27db6350bc77a5d7c0.js","sourcesContent":["const btnTask1 = document.querySelector('.btn-1');\r\nbtnTask1.addEventListener('click', promiseHandler);\r\n\r\nfunction promiseHandler() {\r\n  const delay = ms => {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve(ms);\r\n      }, ms);\r\n    });\r\n  };\r\n\r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms\r\n}\r\n","const btnTask2 = document.querySelector('.btn-2');\r\nbtnTask2.addEventListener('click', promiseHandler2);\r\n\r\nfunction promiseHandler2() {\r\n  const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n\r\n  const toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n      const updatedUsers = allUsers.map(user => {\r\n        if (user.name === userName) {\r\n          const newUserState = { ...user, active: !user.active };\r\n\r\n          return newUserState;\r\n        }\r\n\r\n        return user;\r\n      });\r\n\r\n      resolve(updatedUsers);\r\n    });\r\n  };\r\n\r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n  /*\r\n   * Сейчас работает так\r\n   */\r\n  // toggleUserState(users, 'Mango', logger);\r\n  // toggleUserState(users, 'Lux', logger);\r\n\r\n  /*\r\n   * Должно работать так\r\n   */\r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);\r\n}\r\n","const btnTask3 = document.querySelector('.btn-3');\r\nbtnTask3.addEventListener('click', promiseHandler3);\r\n\r\nfunction promiseHandler3() {\r\n  const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const makeTransaction = transaction => {\r\n    return new Promise((resolve, reject) => {\r\n      const delay = randomIntegerFromInterval(200, 500);\r\n\r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n\r\n        if (canProcess) {\r\n          const obj = { id: transaction.id, time: delay };\r\n\r\n          resolve(obj);\r\n        } else {\r\n          reject(transaction.id);\r\n        }\r\n      }, delay);\r\n    });\r\n  };\r\n\r\n  const logSuccess = ({ id, time }) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n\r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n\r\n  /*\r\n   * Работает так\r\n   */\r\n  // makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n  // makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n  // makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n  // makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n  /*\r\n   * Должно работать так\r\n   */\r\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n}\r\n"],"sourceRoot":""}